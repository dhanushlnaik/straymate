// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
      phone         String?
  branch        String?
  year          Int?
  username      String?            @unique
    emailVerified DateTime?
    image         String?
      role          String?            @default("user")
        bio           String?            @db.Text
  links         String?            @db.Text
  isMember      Boolean            @default(false)
  isAdmin       Boolean            @default(false)
    accounts      Account[]
    sessions      Session[]
      Certificate   Certificate[]
  Registrations Registrations[]
  Events        EventParticipant[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Certificate {
  id      String           @id @unique @default(cuid())
  user    User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  date    DateTime         @default(now())
  type    CertificateTypes
  event   Event            @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId Int
  desc    String?          @db.Text

  @@index([eventId])
  @@index([userId])
}

model Event {
  id           Int                @id @unique @default(autoincrement())
  name         String
  date         DateTime
  isAvailable  Boolean            @default(true)
  attended     Int
  type         EventTypes
  images       Json?
  organizer    String
  description  String             @db.Text
  amount       Int?               @default(0)
  filter       EventFilter
  certificates Certificate[]
  participants EventParticipant[]

  @@index([name])
}

enum CertificateTypes {
  TeamParticipation
  SoloParticipation
  Winner
  RunnerUp
  SpecialRecognition
}

enum EventTypes {
  Workshop
  Seminar
  Gaming
  Talk
  CyberSecurity
  OpenSource
  AndroidDevelopment
  WebDevelopment
  Hackathon
  CodingContest
}

enum EventFilter {
  Year2017to2020
  Year2020to2021
  Year2021to2022
  Year2022to2023
  Year2023to2024
}

model EventParticipant {
  event   Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId Int
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String

  @@id([userId,eventId])
  @@unique([userId,eventId])
  @@index([userId])
  @@index([eventId])
}

model Registrations {
  id           Int    @id @unique @default(autoincrement())
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String @unique
  languages    Json
  skills       Json
  whyJoin      String @db.Text
  expectations String @db.Text
  yearOfReg    Int

  @@index([userId])
}

model Team {
  id          Int    @id @unique @default(autoincrement())
  custid      String    @unique
  email       String    @unique
  name        String
  branch      String
  role        String
  linkedin    String?
  github      String?
  imageLink   String?
}